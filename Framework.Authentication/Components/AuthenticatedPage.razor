@namespace Framework.Authentication
@using Microsoft.Extensions.Options;
@inherits ComponentBase
@attribute [PiralComponent]
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> _options

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @ChildContent
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code{
    #region props
    //[CascadingParameter]
    //private Task<AuthenticationState> authenticationState { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    #endregion


    #region lifecycle
    protected async override void OnInitialized()
    {
        base.OnInitialized();
        await CheckIfAuthenticated();
    }
    #endregion

    #region operations
    async Task CheckIfAuthenticated()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            InteractiveRequestOptions requestOptions = new()
            {
                Interaction = InteractionType.SignIn,
                ReturnUrl = _navigationManager.Uri,
            };
            //requestOptions.TryAddAdditionalParameter("screen_hint", "signup");
            _navigationManager.NavigateToLogin(
                _options.Get(Microsoft.Extensions.Options.Options.DefaultName).AuthenticationPaths.LogInPath,
                requestOptions
            );
        }
    }
    #endregion
}